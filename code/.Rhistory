ggtheme = theme_minimal(),
main='Cluster of Mean and Std CP')
results4
fviz_cluster(results5, data = players_no_outliers[,c(5,6)],
ellipse.type = "convex",
palette = "jco",
axes = c(1, 3),
ggtheme = theme_minimal(),
main='Cluster of Mean and Std CP')
results5
fviz_cluster(results6, data = players_no_outliers[,c(5,6)],
ellipse.type = "convex",
palette = "jco",
axes = c(1, 3),
ggtheme = theme_minimal(),
main='Cluster of Mean and Std CP')
results6
## transform data w/ log to normalize (sort of)
hist(players$Mean_CP) ## before
players$Mean_CP <- log(players$Mean_CP)
hist(players$Mean_CP) ## after
hist(players$Std_CP) ## before
players$Std_CP <- log(players$Std_CP)
hist(players$Std_CP) ## after
results7<-kmeans(players[,c(5,6)],2)
results8<-kmeans(players[,c(5,6)],3)
results9<-kmeans(players[,c(5,6)],4)
fviz_nbclust(players[,c(5,6)], kmeans, method = "wss") #+
#geom_vline(xintercept = 3, linetype = 2)
fviz_nbclust(players[,c(5,6)], method = "silhouette",
FUN = hcut, k.max = 5)
fviz_cluster(results7, data = players[,c(5,6)],
ellipse.type = "convex",
palette = "jco",
axes = c(1, 3),
ggtheme = theme_minimal(),
main='Cluster of Mean and Std CP')
results7
fviz_cluster(results8, data = players[,c(5,6)],
ellipse.type = "convex",
palette = "jco",
axes = c(1, 3),
ggtheme = theme_minimal(),
main='Cluster of Mean and Std CP')
results8
fviz_cluster(results9, data = players[,c(5,6)],
ellipse.type = "convex",
palette = "jco",
axes = c(1, 3),
ggtheme = theme_minimal(),
main='Cluster of Mean and Std CP')
results9
## remove outliers + redo cluster
Q <- quantile(players$Mean_CP, probs=c(.25, .75), na.rm = FALSE)
iqr <- IQR(players$Mean_CP)
up <-  Q[2]+1.5*iqr
low<- Q[1]-1.5*iqr
mean_eliminated <- subset(players, players$Mean_CP > (Q[1] - 1.5*iqr) & players$Mean_CP < (Q[2]+1.5*iqr))
Q <- quantile(mean_eliminated$Std_CP, probs=c(.25, .75), na.rm = FALSE)
iqr <- IQR(mean_eliminated$Std_CP)
up <-  Q[2]+1.5*iqr
low<- Q[1]-1.5*iqr
players_no_outliers <- subset(mean_eliminated, mean_eliminated$Std_CP > (Q[1] - 1.5*iqr) & mean_eliminated$Std_CP < (Q[2]+1.5*iqr))
results10<-kmeans(players_no_outliers[,c(5,6)],2)
results11<-kmeans(players_no_outliers[,c(5,6)],3)
results12<-kmeans(players_no_outliers[,c(5,6)],4)
fviz_nbclust(players_no_outliers[,c(5,6)], kmeans, method = "wss") #+
#geom_vline(xintercept = 3, linetype = 2)
fviz_nbclust(players_no_outliers[,c(5,6)], method = "silhouette",
FUN = hcut, k.max = 5)
fviz_cluster(results10, data = players_no_outliers[,c(5,6)],
ellipse.type = "convex",
palette = "jco",
axes = c(1, 3),
ggtheme = theme_minimal(),
main='Cluster of Mean and Std CP')
results10
fviz_cluster(results11, data = players_no_outliers[,c(5,6)],
ellipse.type = "convex",
palette = "jco",
axes = c(1, 3),
ggtheme = theme_minimal(),
main='Cluster of Mean and Std CP')
results11
fviz_cluster(results12, data = players_no_outliers[,c(5,6)],
ellipse.type = "convex",
palette = "jco",
axes = c(1, 3),
ggtheme = theme_minimal(),
main='Cluster of Mean and Std CP')
results12
library(dplyr)
players <- bind_rows(dat, .id = "column_label")
players$WL <- factor(players$WL)
players$WhiteWL <- factor(players$WhiteWL)
players <- players[,-c(1,2,11)]
## unscaled lin reg ##
set.seed(123)
library(caret)
library(car)
## mean_cp
training.samples <- players$Mean_CP %>%
createDataPartition(p = 0.8, list = FALSE)
train.data  <- players[training.samples, ]
test.data <- players[-training.samples, ]
players.lm1 <- lm(Mean_CP~.,data=train.data)
summary(players.lm1) # Age, Time, Std_CP, Elo, WL, WhiteWL significant
vif(players.lm1) #age, time, WL, WhiteWL need to be removed
players.lm2 <- lm(Mean_CP~Std_CP + Elo,data=train.data)
summary(players.lm2) # Std_CP, Elo significant
vif(players.lm2) #looks good now
players.lm3 <- lm(Mean_CP~(Std_CP + Elo)^2,
data=train.data)
summary(players.lm3) ## no interactions are significant
predictions1 <- players.lm2 %>% predict(test.data)
p1=data.frame(
RMSE = RMSE(predictions1, test.data$Mean_CP),
R2 = R2(predictions1, test.data$Mean_CP)
)
predictions2 <- players.lm3 %>% predict(test.data)
p2=data.frame(
RMSE = RMSE(predictions2, test.data$Mean_CP),
R2 = R2(predictions2, test.data$Mean_CP)
)
p1 ##best model (though, marginally)
p2
AIC(players.lm2,players.lm3)
## std_cp
training.samples <- players$Std_CP %>%
createDataPartition(p = 0.8, list = FALSE)
train.data  <- players[training.samples, ]
test.data <- players[-training.samples, ]
players.lm4 <- lm(Std_CP~.,data=train.data)
summary(players.lm4) ##only mean_cp significant
vif(players.lm4) ##age, time, WL, WhiteWL need to be removed
players.lm5 <- lm(Std_CP~Mean_CP + Elo + OppElo,data=train.data)
summary(players.lm5) ##only mean_cp significant
vif(players.lm5) ##looks good now
players.lm6 <- lm(Std_CP~(Mean_CP + Elo + OppElo)^2,data=train.data)
summary(players.lm6) ##mean_cp, elo, oppelo, elo*oppelo significant
players.lm7 <- lm(Std_CP~Mean_CP + Elo + OppElo + Elo*OppElo,data=train.data)
summary(players.lm7) ##mean_cp, elo, oppelo, elo*oppelo significant
players.lm8 <- lm(Std_CP~Mean_CP,data=train.data)
summary(players.lm8)
predictions3 <- players.lm5 %>% predict(test.data)
p3=data.frame(
RMSE = RMSE(predictions3, test.data$Std_CP),
R2 = R2(predictions3, test.data$Std_CP)
)
predictions4 <- players.lm6 %>% predict(test.data)
p4=data.frame(
RMSE = RMSE(predictions4, test.data$Std_CP),
R2 = R2(predictions4, test.data$Std_CP)
)
predictions5 <- players.lm7 %>% predict(test.data)
p5=data.frame(
RMSE = RMSE(predictions5, test.data$Std_CP),
R2 = R2(predictions5, test.data$Std_CP)
)
predictions6 <- players.lm8 %>% predict(test.data)
p6=data.frame(
RMSE = RMSE(predictions6, test.data$Std_CP),
R2 = R2(predictions6, test.data$Std_CP)
)
p3
p4 ## best model
p5
p6
AIC(players.lm5,players.lm6,players.lm7,players.lm8,players.lm9)
## remove outliers ##
Q <- quantile(players$Mean_CP, probs=c(.25, .75), na.rm = FALSE)
iqr <- IQR(players$Mean_CP)
up <-  Q[2]+1.5*iqr
low<- Q[1]-1.5*iqr
mean_eliminated <- subset(players, players$Mean_CP > (Q[1] - 1.5*iqr) & players$Mean_CP < (Q[2]+1.5*iqr))
Q <- quantile(mean_eliminated$Std_CP, probs=c(.25, .75), na.rm = FALSE)
iqr <- IQR(mean_eliminated$Std_CP)
up <-  Q[2]+1.5*iqr
low<- Q[1]-1.5*iqr
players_no_outliers <- subset(mean_eliminated, mean_eliminated$Std_CP > (Q[1] - 1.5*iqr) & mean_eliminated$Std_CP < (Q[2]+1.5*iqr))
## mean_cp
training.samples <- players_no_outliers$Mean_CP %>%
createDataPartition(p = 0.8, list = FALSE)
train.data  <- players_no_outliers[training.samples, ]
test.data <- players_no_outliers[-training.samples, ]
players_no_outliers.lm1 <- lm(Mean_CP~.,data=train.data)
summary(players_no_outliers.lm1) # Age, Time, Std_CP, Elo, WL, WhiteWL significant
vif(players_no_outliers.lm1) #age, time, WL, WhiteWL need to be removed
vif(players_no_outliers.lm1) #age, time need to be removed
players_no_outliers.lm2 <- lm(Mean_CP~Std_CP + Elo + WL + WhiteWL,data=train.data)
summary(players_no_outliers.lm2) # Std_CP, Elo significant
vif(players_no_outliers.lm2) #looks good now
vif(players_no_outliers.lm2) #looks good now
players_no_outliers.lm3 <- lm(Mean_CP~Std_CP + Elo,
data=train.data)
summary(players_no_outliers.lm3) ## no interactions are significant
vif(players_no_outliers.lm3)
players_no_outliers.lm4 <- lm(Mean_CP~(Std_CP + Elo)^2,
data=train.data)
summary(players_no_outliers.lm4) ## no interactions are significant
predictions1 <- players_no_outliers.lm3 %>% predict(test.data)
p1=data.frame(
RMSE = RMSE(predictions1, test.data$Mean_CP),
R2 = R2(predictions1, test.data$Mean_CP)
)
predictions4 <- players_no_outliers.lm3 %>% predict(test.data)
p2=data.frame(
RMSE = RMSE(predictions2, test.data$Mean_CP),
R2 = R2(predictions2, test.data$Mean_CP)
)
predictions1 <- players_no_outliers.lm3 %>% predict(test.data)
p1=data.frame(
RMSE = RMSE(predictions1, test.data$Mean_CP),
R2 = R2(predictions1, test.data$Mean_CP)
)
predictions2 <- players_no_outliers.lm3 %>% predict(test.data)
p2=data.frame(
RMSE = RMSE(predictions2, test.data$Mean_CP),
R2 = R2(predictions2, test.data$Mean_CP)
)
p1 ##best model (though, marginally)
p2
predictions2 <- players_no_outliers.lm4 %>% predict(test.data)
p2=data.frame(
RMSE = RMSE(predictions2, test.data$Mean_CP),
R2 = R2(predictions2, test.data$Mean_CP)
)
p1 ##best model (though, marginally)
p2
AIC(players_no_outliers.lm3,players_no_outliers.lm4)
## std_cp
training.samples <- players_no_outliers$Std_CP %>%
createDataPartition(p = 0.8, list = FALSE)
train.data  <- players_no_outliers[training.samples, ]
test.data <- players_no_outliers[-training.samples, ]
players_no_outliers.lm5 <- lm(Std_CP~.,data=train.data)
summary(players_no_outliers.lm5) ##only mean_cp significant
vif(players_no_outliers.lm5) ##age, time, WL, WhiteWL need to be removed
players_no_outliers.lm6 <- lm(Std_CP~Mean_CP + Elo + OppElo + WL + WhiteWL,data=train.data)
summary(players_no_outliers.lm6) ##only mean_cp significant
players_no_outliers.lm6 <- lm(Std_CP~(Mean_CP + Elo + OppElo + WL + WhiteWL)^2,data=train.data)
summary(players_no_outliers.lm6) ##only mean_cp significant
players_no_outliers.lm5 <- lm(Std_CP~.,data=train.data)
summary(players_no_outliers.lm5) ##mean_cp, oppelo significant
vif(players_no_outliers.lm5) ##age, time need to be removed
players_no_outliers.lm6 <- lm(Std_CP~Mean_CP + Elo + OppElo + WL + WhiteWL,data=train.data)
summary(players_no_outliers.lm6) ##only mean_cp significant
vif(players_no_outliers.lm6) ##looks good now
players_no_outliers.lm7 <- lm(Std_CP~Mean_CP + Elo + OppElo,data=train.data)
summary(players_no_outliers.lm7) ##mean_cp, elo, oppelo, elo*oppelo significant
vif(players_no_outliers.lm7)
summary(players_no_outliers.lm7) #mean_cp, elo, oppelo, elo*oppelo significant
players_no_outliers.lm8 <- lm(Std_CP~(Mean_CP + Elo + OppElo)^2,data=train.data)
summary(players_no_outliers.lm8) #only mean_cp significant
players_no_outliers.lm9 <- lm(Std_CP~Mean_CP + Elo + OppElo + Mean_CP*OppElo +
Elo*OppElo,data=train.data)
summary(players_no_outliers.lm9) #mean_cp, elo, oppelo, mean_cp*oppelo, elo*oppelo significant
players_no_outliers.lm10 <- lm(Std_CP~Mean_CP,data=train.data)
summary(players_no_outliers.lm10)
predictions3 <- players_no_outliers.lm7 %>% predict(test.data)
p3=data.frame(
RMSE = RMSE(predictions3, test.data$Std_CP),
R2 = R2(predictions3, test.data$Std_CP)
)
predictions4 <- players_no_outliers.lm8 %>% predict(test.data)
p4=data.frame(
RMSE = RMSE(predictions4, test.data$Std_CP),
R2 = R2(predictions4, test.data$Std_CP)
)
predictions5 <- players_no_outliers.lm9 %>% predict(test.data)
p5=data.frame(
RMSE = RMSE(predictions5, test.data$Std_CP),
R2 = R2(predictions5, test.data$Std_CP)
)
predictions6 <- players_no_outliers.lm10 %>% predict(test.data)
p6=data.frame(
RMSE = RMSE(predictions6, test.data$Std_CP),
R2 = R2(predictions6, test.data$Std_CP)
)
p3
p4 ## best model
p5
p6
AIC(players_no_outliers.lm5,players_no_outliers.lm6,players_no_outliers.lm7,players_no_outliers.lm8,players_no_outliers.lm9)
AIC(players_no_outliers.lm7,players_no_outliers.lm8,players_no_outliers.lm9,players_no_outliers.lm10)
## normalized lin reg ##
players.norm <- players
players.norm$Mean_CP <- log(players$Mean_CP)
players.norm$Std_CP <- log(players$Std_CP)
## normalized lin reg ##
players.norm <- players
players.norm$Mean_CP <- log(players$Mean_CP)
players.norm$Std_CP <- log(players$Std_CP)
## mean_cp
training.samples <- players.norm$Mean_CP %>%
createDataPartition(p = 0.8, list = FALSE)
train.data  <- players.norm[training.samples, ]
test.data <- players.norm[-training.samples, ]
players.norm.lm1 <- lm(Mean_CP~.,data=train.data)
summary(players.norm.lm1) # Age, Time, Std_CP, Elo, WL, WhiteWL significant
vif(players.norm.lm1) #age, time, WL, WhiteWL need to be removed
vif(players.norm.lm1) #age, time need to be removed
players.norm.lm2 <- lm(Mean_CP~Std_CP + Elo + WL + WhiteWL,data=train.data)
summary(players.norm.lm2) # Std_CP, Elo significant
vif(players.norm.lm2) #looks good now
players.norm.lm3 <- lm(Mean_CP~(Std_CP + Elo + WL + WhiteWL)^2,
data=train.data)
summary(players.norm.lm3) ## no interactions are significant
players.norm.lm4 <- lm(Mean_CP~(Std_CP + Elo)^2,
data=train.data)
summary(players.norm.lm4)
players.norm.lm5 <- lm(Mean_CP~Std_CP + Elo + Std_CP*Elo,
data=train.data)
summary(players.norm.lm5) # std_cp, elo, std_cp*elo significant
predictions1 <- players.lm2 %>% predict(test.data)
p1=data.frame(
RMSE = RMSE(predictions1, test.data$Mean_CP),
R2 = R2(predictions1, test.data$Mean_CP)
)
predictions2 <- players.lm4 %>% predict(test.data)
p2=data.frame(
RMSE = RMSE(predictions2, test.data$Mean_CP),
R2 = R2(predictions2, test.data$Mean_CP)
)
predictions3 <- players.lm5 %>% predict(test.data)
p3=data.frame(
RMSE = RMSE(predictions3, test.data$Mean_CP),
R2 = R2(predictions3, test.data$Mean_CP)
)
predictions1 <- players.norm.lm2 %>% predict(test.data)
p1=data.frame(
RMSE = RMSE(predictions1, test.data$Mean_CP),
R2 = R2(predictions1, test.data$Mean_CP)
)
predictions2 <- players.norm.lm4 %>% predict(test.data)
p2=data.frame(
RMSE = RMSE(predictions2, test.data$Mean_CP),
R2 = R2(predictions2, test.data$Mean_CP)
)
predictions3 <- players.norm.lm5 %>% predict(test.data)
p3=data.frame(
RMSE = RMSE(predictions3, test.data$Mean_CP),
R2 = R2(predictions3, test.data$Mean_CP)
)
p1
p2 ##best model (though, marginally)
p3
AIC(players.norm.lm2,players.norm.lm4,players.norm.lm5)
## std_cp
training.samples <- players$Std_CP %>%
createDataPartition(p = 0.8, list = FALSE)
train.data  <- players[training.samples, ]
test.data <- players[-training.samples, ]
## std_cp
training.samples <- players.norm$Std_CP %>%
createDataPartition(p = 0.8, list = FALSE)
train.data  <- players.norm[training.samples, ]
test.data <- players.norm[-training.samples, ]
players.norm.lm6 <- lm(Std_CP~.,data=train.data)
summary(players.norm.lm6) ##only mean_cp significant
vif(players.norm.lm6) ##age, time, WL, WhiteWL need to be removed
vif(players.norm.lm6) ##age, time, WL, WhiteWL need to be removed
players.norm.lm7 <- lm(Std_CP~Mean_CP + Elo + WhiteWL,data=train.data)
summary(players.norm.lm7) ##mean_cp, Elo significant
vif(players.norm.lm7) ##looks good now
players.norm.lm8 <- lm(Std_CP~(Mean_CP + Elo + WhiteWL)^2,data=train.data)
summary(players.norm.lm8) ##mean_cp, elo, oppelo, mean_cp*elo, elo*oppelo significant
players.norm.lm9 <- lm(Std_CP~Mean_CP + WhiteWL + Mean_CP*WhiteWL,
data=train.data)
summary(players.norm.lm9) ##elo, oppelo, elo*oppelo significant
players.norm.lm9 <- lm(Std_CP~Mean_CP + WhiteWL + Mean_CP*WhiteWL,
data=train.data)
summary(players.norm.lm9) ##elo, oppelo, elo*oppelo significant
predictions4 <- players.norm.lm7 %>% predict(test.data)
p4=data.frame(
RMSE = RMSE(predictions4, test.data$Std_CP),
R2 = R2(predictions4, test.data$Std_CP)
)
predictions5 <- players.norm.lm8 %>% predict(test.data)
p5=data.frame(
RMSE = RMSE(predictions5, test.data$Std_CP),
R2 = R2(predictions5, test.data$Std_CP)
)
predictions6 <- players.norm.lm9 %>% predict(test.data)
p6=data.frame(
RMSE = RMSE(predictions6, test.data$Std_CP),
R2 = R2(predictions6, test.data$Std_CP)
)
p4
p5 ## best model
p6
AIC(players.norm.lm7,players.norm.lm8,players.norm.lm9)
## normalized + remove outliers ##
Q <- quantile(players.norm$Mean_CP, probs=c(.25, .75), na.rm = FALSE)
iqr <- IQR(players.norm$Mean_CP)
up <-  Q[2]+1.5*iqr
low<- Q[1]-1.5*iqr
mean_eliminated <- subset(players.norm, players.norm$Mean_CP > (Q[1] - 1.5*iqr) & players.norm$Mean_CP < (Q[2]+1.5*iqr))
Q <- quantile(mean_eliminated$Std_CP, probs=c(.25, .75), na.rm = FALSE)
iqr <- IQR(mean_eliminated$Std_CP)
up <-  Q[2]+1.5*iqr
low<- Q[1]-1.5*iqr
players_no_outliers_norm <- subset(mean_eliminated, mean_eliminated$Std_CP > (Q[1] - 1.5*iqr) & mean_eliminated$Std_CP < (Q[2]+1.5*iqr))
## mean_cp
training.samples <- players_no_outliers_norm$Mean_CP %>%
createDataPartition(p = 0.8, list = FALSE)
train.data  <- players_no_outliers_norm[training.samples, ]
test.data <- players_no_outliers_norm[-training.samples, ]
players_no_outliers_norm.lm1 <- lm(Mean_CP~.,data=train.data)
summary(players_no_outliers_norm.lm1) # Age, Time, Std_CP, Elo, WL, WhiteWL significant
vif(players_no_outliers_norm.lm1) #age, time need to be removed
players_no_outliers_norm.lm2 <- lm(Mean_CP~Std_CP + Elo,data=train.data)
summary(players_no_outliers_norm.lm2) # Std_CP, Elo, WL, WhiteWL significant
vif(players_no_outliers_norm.lm2) #WL, WhiteWL need to be removed
players_no_outliers_norm.lm3 <- lm(Mean_CP~(Std_CP + Elo)^2,
data=train.data)
summary(players_no_outliers_norm.lm3) # Std_CP, Elo significant
vif(players_no_outliers_norm.lm3) # looks good now
players_no_outliers_norm.lm3 <- lm(Mean_CP~(Std_CP + Elo)^2,
data=train.data)
summary(players_no_outliers_norm.lm3) # Std_CP, Elo significant
players_no_outliers_norm.lm4 <- lm(Mean_CP~Std_CP + Elo + Std_CP*Elo,
data=train.data)
summary(players_no_outliers_norm.lm4) ## no interactions are significant
predictions1 <- players_no_outliers_norm.lm2 %>% predict(test.data)
p1=data.frame(
RMSE = RMSE(predictions1, test.data$Mean_CP),
R2 = R2(predictions1, test.data$Mean_CP)
)
predictions2 <- players_no_outliers_norm.lm3 %>% predict(test.data)
p2=data.frame(
RMSE = RMSE(predictions2, test.data$Mean_CP),
R2 = R2(predictions2, test.data$Mean_CP)
)
predictions3 <- players_no_outliers_norm.lm4 %>% predict(test.data)
p3=data.frame(
RMSE = RMSE(predictions3, test.data$Mean_CP),
R2 = R2(predictions3, test.data$Mean_CP)
)
p1
p2 ##best model (though, marginally)
p3
AIC(players_no_outliers_norm.lm2,players_no_outliers_norm.lm3,players_no_outliers_norm.lm4)
## std_cp
training.samples <- players_no_outliers_norm$Std_CP %>%
createDataPartition(p = 0.8, list = FALSE)
train.data  <- players_no_outliers_norm[training.samples, ]
test.data <- players_no_outliers_norm[-training.samples, ]
players_no_outliers_norm.lm5 <- lm(Std_CP~.,data=train.data)
summary(players_no_outliers_norm.lm5) #mean_cp, oppelo significant
vif(players_no_outliers_norm.lm5) #age, time need to be removed
players_no_outliers_norm.lm6 <- lm(Std_CP~Mean_CP + Elo + OppElo + WhiteWL,data=train.data)
summary(players_no_outliers_norm.lm6) #only mean_cp, oppelo significant
summary(players_no_outliers_norm.lm6) #only mean_cp, elo significant
vif(players_no_outliers_norm.lm6) #WL, WhiteWL needs to be removed
players_no_outliers_norm.lm7 <- lm(Std_CP~(Mean_CP + Elo + OppElo + WhiteWL)^2,data=train.data)
summary(players_no_outliers_norm.lm7) #only mean_cp significant
vif(players_no_outliers_norm.lm7) #looks good now
players_no_outliers_norm.lm8 <- lm(Std_CP~Mean_CP + Elo + OppElo + Elo*OppElo,data=train.data)
summary(players_no_outliers_norm.lm8) #mean_cp, elo, oppelo, mean_cp*oppelo, elo*oppelo significant
players_no_outliers_norm.lm9 <- lm(Std_CP~Mean_CP + Elo,data=train.data)
summary(players_no_outliers_norm.lm9) #mean_cp, elo, oppelo, mean_cp*oppelo, elo*oppelo significant
players_no_outliers_norm.lm10 <- lm(Std_CP~Mean_CP + Elo + WhiteWL,data=train.data)
summary(players_no_outliers_norm.lm10)
vif(players_no_outliers_norm.lm10)
players_no_outliers_norm.lm10 <- lm(Std_CP~(Mean_CP + Elo)^2,data=train.data)
summary(players_no_outliers_norm.lm10)
predictions4 <- players_no_outliers_norm.lm6 %>% predict(test.data)
p4=data.frame(
RMSE = RMSE(predictions4, test.data$Std_CP),
R2 = R2(predictions4, test.data$Std_CP)
)
predictions5 <- players_no_outliers_norm.lm7 %>% predict(test.data)
p5=data.frame(
RMSE = RMSE(predictions5, test.data$Std_CP),
R2 = R2(predictions5, test.data$Std_CP)
)
predictions6 <- players_no_outliers_norm.lm8 %>% predict(test.data)
p6=data.frame(
RMSE = RMSE(predictions6, test.data$Std_CP),
R2 = R2(predictions6, test.data$Std_CP)
)
predictions7 <- players_no_outliers_norm.lm9 %>% predict(test.data)
p7=data.frame(
RMSE = RMSE(predictions7, test.data$Std_CP),
R2 = R2(predictions7, test.data$Std_CP)
)
predictions4 <- players_no_outliers_norm.lm6 %>% predict(test.data)
p4=data.frame(
RMSE = RMSE(predictions4, test.data$Std_CP),
R2 = R2(predictions4, test.data$Std_CP)
)
predictions5 <- players_no_outliers_norm.lm7 %>% predict(test.data)
p5=data.frame(
RMSE = RMSE(predictions5, test.data$Std_CP),
R2 = R2(predictions5, test.data$Std_CP)
)
predictions6 <- players_no_outliers_norm.lm8 %>% predict(test.data)
p6=data.frame(
RMSE = RMSE(predictions6, test.data$Std_CP),
R2 = R2(predictions6, test.data$Std_CP)
)
predictions7 <- players_no_outliers_norm.lm9 %>% predict(test.data)
p7=data.frame(
RMSE = RMSE(predictions7, test.data$Std_CP),
R2 = R2(predictions7, test.data$Std_CP)
)
p4 ## best model
p5
p6
p7
AIC(players_no_outliers_norm.lm6,players_no_outliers_norm.lm7,players_no_outliers_norm.lm8,players_no_outliers_norm.lm9)
